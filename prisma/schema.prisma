generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  password        String
  name            String?
  role            String            @default("user") 
  createdAt       DateTime          @default(now()) 
  updatedAt       DateTime          @updatedAt 
  videosProcessed VideosProcessed[]
  questions       Question[]
  answers         Answer[]
  comments        Comment[]
}

model VideosProcessed {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  actionResult String
  modelId      Int
  model        Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  confidence   Float?
  createdAt    DateTime @default(now()) 
  updatedAt    DateTime @updatedAt 
}

model Model {
  id              Int               @id @default(autoincrement())
  name            String
  version         String
  accuracy        Float?
  trainedAt       DateTime          @default(now())
  createdAt       DateTime          @default(now()) 
  updatedAt       DateTime          @updatedAt 
  videosProcessed VideosProcessed[]
  predictions     Prediction[]
}

model VideoFeature {
  id          Int      @id @default(autoincrement())
  videoId     Int
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  featureName String
  value       Float
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 
}

model Video {
  id            Int            @id @default(autoincrement())
  features      VideoFeature[]
  predictions   Prediction[]
  createdAt     DateTime       @default(now()) 
  updatedAt     DateTime       @updatedAt 
}

model Prediction {
  id          Int      @id @default(autoincrement())
  videoId     Int
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  modelId     Int
  model       Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  action      String
  confidence  Float
  timestamp   DateTime @default(now()) 
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 
<<<<<<< HEAD
<<<<<<< HEAD
}

=======
}
>>>>>>> 4c9612f (BE admin)
model Question {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
<<<<<<< HEAD
<<<<<<< HEAD
  answers     Answer[] 
=======
  answers     Answer[]
>>>>>>> 4c9612f (BE admin)
=======
  answers     Answer[] 
>>>>>>> dde7706 (update forum)
}

model Answer {
  id          Int       @id @default(autoincrement())
  content     String
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  questionId  Int
  question    Question  @relation(fields: [questionId], references: [id])
  isAccepted  Boolean   @default(false)
  isEdited    Boolean   @default(false)  // Add this field
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  answerId  Int
  answer    Answer    @relation(fields: [answerId], references: [id])
  isEdited  Boolean   @default(false)  // Add this field
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
<<<<<<< HEAD
=======
>>>>>>> 2e9a2ff (first commit)
}
=======
}

>>>>>>> 4c9612f (BE admin)
